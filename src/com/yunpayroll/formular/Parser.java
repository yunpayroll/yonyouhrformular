/* Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */
package com.yunpayroll.formular;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.yunpayroll.formular.express.Addition;
import com.yunpayroll.formular.express.AndExpression;
import com.yunpayroll.formular.express.BinaryExpression;
import com.yunpayroll.formular.express.BitwiseAnd;
import com.yunpayroll.formular.express.BitwiseOr;
import com.yunpayroll.formular.express.BitwiseXor;
import com.yunpayroll.formular.express.CaseExpression;
import com.yunpayroll.formular.express.CastExpression;
import com.yunpayroll.formular.express.ColDataType;
import com.yunpayroll.formular.express.Column;
import com.yunpayroll.formular.express.Concat;
import com.yunpayroll.formular.express.DateTimeLiteralExpression;
import com.yunpayroll.formular.express.DateValue;
import com.yunpayroll.formular.express.Division;
import com.yunpayroll.formular.express.DoubleValue;
import com.yunpayroll.formular.express.EqualsTo;
import com.yunpayroll.formular.express.Expression;
import com.yunpayroll.formular.express.ExpressionList;
import com.yunpayroll.formular.express.ExpressionListItem;
import com.yunpayroll.formular.express.Function;
import com.yunpayroll.formular.express.GlobalVar;
import com.yunpayroll.formular.express.GreaterThan;
import com.yunpayroll.formular.express.GreaterThanEquals;
import com.yunpayroll.formular.express.HexValue;
import com.yunpayroll.formular.express.IsNullExpression;
import com.yunpayroll.formular.express.LikeExpression;
import com.yunpayroll.formular.express.LongValue;
import com.yunpayroll.formular.express.MinorThan;
import com.yunpayroll.formular.express.MinorThanEquals;
import com.yunpayroll.formular.express.Modulo;
import com.yunpayroll.formular.express.Multiplication;
import com.yunpayroll.formular.express.NotEqualsTo;
import com.yunpayroll.formular.express.NotExpression;
import com.yunpayroll.formular.express.NullValue;
import com.yunpayroll.formular.express.OrExpression;
import com.yunpayroll.formular.express.Parenthesis;
import com.yunpayroll.formular.express.SelectExpressionItem;
import com.yunpayroll.formular.express.SignedExpression;
import com.yunpayroll.formular.express.StringValue;
import com.yunpayroll.formular.express.Subtraction;
import com.yunpayroll.formular.express.Table;
import com.yunpayroll.formular.express.TimeKeyExpression;
import com.yunpayroll.formular.express.TimeValue;
import com.yunpayroll.formular.express.TimestampValue;
import com.yunpayroll.formular.express.WhenClause;
import com.yunpayroll.formular.func.ValueOfSubtable;

/**
 * The parser generated by JavaCC
 */
public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants, ParserConstants {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();boolean errorRecovery = false;
    List<ParseException> parseErrors = new ArrayList<ParseException>();
        private ExpressionVisitor expressionVisitor =new SelectItemVisitorImpl(this);
        private FuncMap funcMap = new FuncMap();
    private void linkAST(ASTNodeAccess access, SimpleNode node) {
        access.setASTNode(node);
        node.jjtSetValue(access);
    }

    public Node getASTRoot() {
        return jjtree.rootNode();
    }

    public void setErrorRecovery(boolean errorRecovery) {
        this.errorRecovery = errorRecovery;
    }

    public List<ParseException> getParseErrors() {
        return parseErrors;
    }
     public void addFunction(String functionName, FuncCommand function)
    {
        funcMap.put(functionName, function);

    }
      public Object getValue() throws ParseException{
        SelectExpressionItem item =  Statement();
                
                 return  item.accept(expressionVisitor);

    }
    private Map<String,Object> globals = new HashMap<String, Object>();
                private Map<String,Object> variables = new HashMap<String, Object>();

                public void addGlobalVar(String string, Object string2) {
                        globals.put(string, string2);
                }

                public Object getGlobalVar(String string) {
                        return globals.get(string);
                }


                public Object getVariable(String string) {
                        return variables.get(string);
                }

                public void addVariable(String string, Object l) {
                        variables.put(string, l);
                }

  void error_skipto(int kind) throws ParseException {/*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {ParseException e = generateParseException();
  System.out.println(e.toString());
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind && t.kind != EOF);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  final public SelectExpressionItem Statement() throws ParseException {/*@bgen(jjtree) Statement */
    SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);SelectExpressionItem selectExpressionItem = new SelectExpressionItem();
    Expression expression = null;
    Token token = null;
    String str =null;
    try {
      if (jj_2_1(2147483647)) {
        token = jj_consume_token(S_IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
str= token.image; StringExpress exp = new StringExpress();{if ("" != null) return exp;}
      } else if (jj_2_2(2147483647)) {
        token = jj_consume_token(PK_IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
str= token.image; PKExpressItem item = new PKExpressItem(); {if ("" != null) return item;}
      } else {
        switch (jj_nt.kind) {
        case K_VALUEOFSUBTABLE:{
          jj_consume_token(K_VALUEOFSUBTABLE);
          selectExpressionItem = ValueOfSubtable();
jjtree.closeNodeScope(jjtn000, true);
                                                                               jjtc000 = false;
{if ("" != null) return selectExpressionItem;}
          break;
          }
        case K_UPDATEFROMANOTHERPERIOD:{
          jj_consume_token(K_UPDATEFROMANOTHERPERIOD);
          selectExpressionItem = Pairs();
jjtree.closeNodeScope(jjtn000, true);
                                                                            jjtc000 = false;
{if ("" != null) return selectExpressionItem;}
          break;
          }
        case K_END:
        case K_NULL:
        case K_TIME_KEY_EXPR:
        case K_CASE:
        case K_CAST:
        case K_IF:
        case K_DATETIMELITERAL:
        case S_DOUBLE:
        case S_LONG:
        case S_HEX:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 43:
        case 46:
        case 48:
        case 49:
        case 59:
        case 61:
        case 62:{
          expression = SimpleExpression();
selectExpressionItem.setExpression(expression);
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
{if ("" != null) return selectExpressionItem;}
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public ValueOfSubtable ValueOfSubtable() throws ParseException {/*@bgen(jjtree) ValueOfSubtable */
        SimpleNode jjtn000 = new SimpleNode(JJTVALUEOFSUBTABLE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Column column = null;
        String sql =null;
        GlobalVar var = null;
        Token token = null;
    try {
      jj_consume_token(43);
      column = Column();
      jj_consume_token(44);
      token = jj_consume_token(SQL_IDENTIFIER);
sql =token.image;
      jj_consume_token(45);
      jj_consume_token(46);
      token = jj_consume_token(S_IDENTIFIER);
      jj_consume_token(46);
var=new GlobalVar(token.image);
      jj_consume_token(47);
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
ValueOfSubtable vo = new ValueOfSubtable();
      vo.setColumn(column);
      vo.setSql(sql);
      vo.setVar(var);
      {if ("" != null) return vo;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public UpdateFromAnotherPeriod Pairs() throws ParseException {/*@bgen(jjtree) Pairs */
    SimpleNode jjtn000 = new SimpleNode(JJTPAIRS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);UpdateFromAnotherPeriod retval = new UpdateFromAnotherPeriod();
    Map<String,String> expr = new HashMap<String, String>();
    List<Map<String,String>> expressions = new ArrayList<Map<String,String>>();
    try {
      jj_consume_token(43);
      expr = Pair();
expressions.add(expr);
      label_1:
      while (true) {
        switch (jj_nt.kind) {
        case 45:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        jj_consume_token(45);
        expr = Pair();
expressions.add(expr);
      }
      jj_consume_token(47);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
retval.setParameters(expressions);
        {if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public Map Pair() throws ParseException {/*@bgen(jjtree) Pair */
        SimpleNode jjtn000 = new SimpleNode(JJTPAIR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String left=null;
        String right = null;
        Map<String,String> map = new HashMap<String,String>();
        Token token =null;
        Token sign= null;
    try {
      left = RelObjectName();
      jj_consume_token(44);
      if (jj_2_3(2147483647)) {
        right = RelObjectName();
      } else if (jj_2_4(2147483647)) {
        switch (jj_nt.kind) {
        case 48:
        case 49:{
          switch (jj_nt.kind) {
          case 48:{
            sign = jj_consume_token(48);
            break;
            }
          case 49:{
            sign = jj_consume_token(49);
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        token = jj_consume_token(S_LONG);
right=token.image;
      } else if (jj_2_5(2147483647)) {
        switch (jj_nt.kind) {
        case 48:
        case 49:{
          switch (jj_nt.kind) {
          case 48:{
            sign = jj_consume_token(48);
            break;
            }
          case 49:{
            sign = jj_consume_token(49);
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        token = jj_consume_token(S_DOUBLE);
right=token.image;
      } else {
        switch (jj_nt.kind) {
        case PK_IDENTIFIER:{
          right = PKObjectName();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
if(sign!=null){
                  right= sign.image+right;
          }
        map.put(left,right);
        {if ("" != null) return map;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
        SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      switch (jj_nt.kind) {
      case S_IDENTIFIER:{
        tk = jj_consume_token(S_IDENTIFIER);
        break;
        }
      case S_QUOTED_IDENTIFIER:{
        tk = jj_consume_token(S_QUOTED_IDENTIFIER);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return tk.image;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionListItem ExpressionListItem() throws ParseException {/*@bgen(jjtree) ExpressionListItem */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONLISTITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ExpressionListItem expressionListItem = null;
    ExpressionList expressionList = null;
    try {
      jj_consume_token(43);
      expressionList = SimpleExpressionList();
expressionListItem = new ExpressionListItem(); expressionListItem.setExpressionList(expressionList);
      jj_consume_token(47);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return expressionListItem;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {/*@bgen(jjtree) Expression */
    SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression retval = null;
    try {
      retval = OrExpression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression OrExpression() throws ParseException {/*@bgen(jjtree) OrExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTOREXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression left, right, result;
    try {
      left = AndExpression();
result = left;
      label_2:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(K_OR);
        right = AndExpression();
result = new OrExpression(left, right);
                left = result;
      }
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {/*@bgen(jjtree) AndExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression left, right, result;
    boolean not = false;
    try {
      if (jj_2_7(2147483647)) {
        left = Condition();
      } else {
        switch (jj_nt.kind) {
        case K_NOT:
        case 43:{
          switch (jj_nt.kind) {
          case K_NOT:{
            jj_consume_token(K_NOT);
not = true;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          jj_consume_token(43);
          left = OrExpression();
          jj_consume_token(47);
left = new Parenthesis(left); if (not) { ((Parenthesis)left).setNot(); not = false; }
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
result = left;
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case K_AND:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        jj_consume_token(K_AND);
        if (jj_2_8(2147483647)) {
          right = Condition();
        } else {
          switch (jj_nt.kind) {
          case K_NOT:
          case 43:{
            switch (jj_nt.kind) {
            case K_NOT:{
              jj_consume_token(K_NOT);
not = true;
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              ;
            }
            jj_consume_token(43);
            right = OrExpression();
            jj_consume_token(47);
right = new Parenthesis(right); if (not) { ((Parenthesis)right).setNot(); not = false; }
            break;
            }
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
result = new AndExpression(left, right);
            left = result;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression RegularCondition() throws ParseException {/*@bgen(jjtree) RegularCondition */
    SimpleNode jjtn000 = new SimpleNode(JJTREGULARCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result = null;
    Expression leftExpression;
    Expression rightExpression;
    boolean not = false;

    boolean binary = false;
    try {
      switch (jj_nt.kind) {
      case K_NOT:{
        jj_consume_token(K_NOT);
not = true;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      leftExpression = ComparisonItem();
result = leftExpression;
      if (jj_2_9(2)) {
        jj_consume_token(50);
result = new GreaterThan();
      } else {
        switch (jj_nt.kind) {
        case 51:{
          jj_consume_token(51);
result = new MinorThan();
          break;
          }
        case 44:{
          jj_consume_token(44);
result = new EqualsTo();
          break;
          }
        case OP_GREATERTHANEQUALS:{
          token = jj_consume_token(OP_GREATERTHANEQUALS);
result = new GreaterThanEquals(token.image);
          break;
          }
        case OP_MINORTHANEQUALS:{
          token = jj_consume_token(OP_MINORTHANEQUALS);
result = new MinorThanEquals(token.image);
          break;
          }
        case OP_NOTEQUALSSTANDARD:{
          token = jj_consume_token(OP_NOTEQUALSSTANDARD);
result = new NotEqualsTo(token.image);
          break;
          }
        case OP_NOTEQUALSBANG:{
          token = jj_consume_token(OP_NOTEQUALSBANG);
result = new NotEqualsTo(token.image);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      rightExpression = ComparisonItem();
BinaryExpression regCond = (BinaryExpression) result;
        regCond.setLeftExpression(leftExpression);
        regCond.setRightExpression(rightExpression);
        if (not)
            regCond.setNot();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList SimpleExpressionList() throws ParseException {/*@bgen(jjtree) SimpleExpressionList */
    SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEEXPRESSIONLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ExpressionList retval = new ExpressionList();
    List<Expression> expressions = new ArrayList<Expression>();
    Expression expr = null;
    try {
      expr = SimpleExpression();
expressions.add(expr);
      label_4:
      while (true) {
        switch (jj_nt.kind) {
        case 45:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_4;
        }
        jj_consume_token(45);
        expr = SimpleExpression();
expressions.add(expr);
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
retval.setExpressions(expressions);
        {if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList SimpleExpressionListAtLeastTwoItems() throws ParseException {/*@bgen(jjtree) SimpleExpressionListAtLeastTwoItems */
    SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEEXPRESSIONLISTATLEASTTWOITEMS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ExpressionList retval = new ExpressionList();
    List<Expression> expressions = new ArrayList<Expression>();
    Expression expr = null;
    try {
      expr = SimpleExpression();
expressions.add(expr);
      label_5:
      while (true) {
        jj_consume_token(45);
        expr = SimpleExpression();
expressions.add(expr);
        switch (jj_nt.kind) {
        case 45:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
retval.setExpressions(expressions);
        {if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression ComparisonItem() throws ParseException {/*@bgen(jjtree) ComparisonItem */
    SimpleNode jjtn000 = new SimpleNode(JJTCOMPARISONITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression retval = null;
    try {
      retval = SimpleExpression();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression SimpleExpression() throws ParseException {/*@bgen(jjtree) SimpleExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression retval = null;
    try {
      retval = BitwiseAndOr();
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
{if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression ConcatExpression() throws ParseException {/*@bgen(jjtree) ConcatExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTCONCATEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
    try {
      leftExpression = AdditiveExpression();
result = leftExpression;
      label_6:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(52);
        rightExpression = AdditiveExpression();
Concat binExp = new Concat();
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            result = binExp;
            leftExpression = result;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression BitwiseAndOr() throws ParseException {/*@bgen(jjtree) BitwiseAndOr */
    SimpleNode jjtn000 = new SimpleNode(JJTBITWISEANDOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
    try {
      leftExpression = ConcatExpression();
result = leftExpression;
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case 53:
        case 54:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        switch (jj_nt.kind) {
        case 53:{
          jj_consume_token(53);
result = new BitwiseOr();
          break;
          }
        case 54:{
          jj_consume_token(54);
result = new BitwiseAnd();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rightExpression = ConcatExpression();
BinaryExpression binExp = (BinaryExpression) result;
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            leftExpression = result;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
    try {
      leftExpression = MultiplicativeExpression();
result = leftExpression;
      label_8:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_8;
        }
        switch (jj_nt.kind) {
        case 48:{
          jj_consume_token(48);
result = new Addition();
          break;
          }
        case 49:{
          jj_consume_token(49);
result = new Subtraction();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rightExpression = MultiplicativeExpression();
BinaryExpression binExp = (BinaryExpression) result;
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            leftExpression = result;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
    try {
      leftExpression = BitwiseXor();
result = leftExpression;
      label_9:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_9;
        }
        switch (jj_nt.kind) {
        case 55:{
          jj_consume_token(55);
result = new Multiplication();
          break;
          }
        case 56:{
          jj_consume_token(56);
result = new Division();
          break;
          }
        case 57:{
          jj_consume_token(57);
result = new Modulo();
          break;
          }
        case K_LIKE:{
          jj_consume_token(K_LIKE);
result = new  LikeExpression();
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rightExpression = BitwiseXor();
BinaryExpression binExp = (BinaryExpression) result;
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            leftExpression = result;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression BitwiseXor() throws ParseException {/*@bgen(jjtree) BitwiseXor */
    SimpleNode jjtn000 = new SimpleNode(JJTBITWISEXOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result = null;
    Expression leftExpression = null;
    Expression rightExpression = null;
    try {
      leftExpression = PrimaryExpression();
result = leftExpression;
      label_10:
      while (true) {
        switch (jj_nt.kind) {
        case 58:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        jj_consume_token(58);
        rightExpression = PrimaryExpression();
BitwiseXor binExp = new BitwiseXor();
            binExp.setLeftExpression(leftExpression);
            binExp.setRightExpression(rightExpression);
            result = binExp;
            leftExpression = result;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {/*@bgen(jjtree) PrimaryExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTPRIMARYEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression retval = null;
    CastExpression castExpr = null;
    Token token = null;
    Token sign = null;
    String tmp = "";
    ColDataType type = null;
    try {
      switch (jj_nt.kind) {
      case K_NULL:{
        jj_consume_token(K_NULL);
retval = new NullValue();
        break;
        }
      case K_CASE:{
        retval = CaseWhenExpression();
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        if (jj_2_13(2147483647)) {
          switch (jj_nt.kind) {
          case 48:
          case 49:{
            switch (jj_nt.kind) {
            case 48:{
              sign = jj_consume_token(48);
              break;
              }
            case 49:{
              sign = jj_consume_token(49);
              break;
              }
            default:
              jj_la1[22] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            ;
          }
          retval = Function();
        } else if (jj_2_14(2)) {
          switch (jj_nt.kind) {
          case 48:
          case 49:{
            switch (jj_nt.kind) {
            case 48:{
              sign = jj_consume_token(48);
              break;
              }
            case 49:{
              sign = jj_consume_token(49);
              break;
              }
            default:
              jj_la1[24] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            ;
          }
          token = jj_consume_token(S_DOUBLE);
retval = new DoubleValue(token.image);
        } else if (jj_2_15(2)) {
          switch (jj_nt.kind) {
          case 48:
          case 49:{
            switch (jj_nt.kind) {
            case 48:{
              sign = jj_consume_token(48);
              break;
              }
            case 49:{
              sign = jj_consume_token(49);
              break;
              }
            default:
              jj_la1[26] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            ;
          }
          token = jj_consume_token(S_LONG);
retval = new LongValue(token.image);
        } else if (jj_2_16(2)) {
          switch (jj_nt.kind) {
          case 48:
          case 49:{
            switch (jj_nt.kind) {
            case 48:{
              sign = jj_consume_token(48);
              break;
              }
            case 49:{
              sign = jj_consume_token(49);
              break;
              }
            default:
              jj_la1[28] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            ;
          }
          token = jj_consume_token(S_HEX);
retval = new HexValue(token.image);
        } else if (jj_2_17(2)) {
          switch (jj_nt.kind) {
          case 48:
          case 49:{
            switch (jj_nt.kind) {
            case 48:{
              sign = jj_consume_token(48);
              break;
              }
            case 49:{
              sign = jj_consume_token(49);
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          retval = CastExpression();
        } else {
          switch (jj_nt.kind) {
          case K_TIME_KEY_EXPR:{
            token = jj_consume_token(K_TIME_KEY_EXPR);
retval = new TimeKeyExpression(token.image);
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            if (jj_2_18(2)) {
              retval = DateTimeLiteralExpression();
            } else if (jj_2_19(2147483647)) {
              switch (jj_nt.kind) {
              case 48:
              case 49:{
                switch (jj_nt.kind) {
                case 48:{
                  sign = jj_consume_token(48);
                  break;
                  }
                case 49:{
                  sign = jj_consume_token(49);
                  break;
                  }
                default:
                  jj_la1[32] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              default:
                jj_la1[33] = jj_gen;
                ;
              }
              retval = Column();
            } else if (jj_2_20(2147483647)) {
              switch (jj_nt.kind) {
              case 48:
              case 49:{
                switch (jj_nt.kind) {
                case 48:{
                  sign = jj_consume_token(48);
                  break;
                  }
                case 49:{
                  sign = jj_consume_token(49);
                  break;
                  }
                default:
                  jj_la1[34] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                break;
                }
              default:
                jj_la1[35] = jj_gen;
                ;
              }
              jj_consume_token(43);
              retval = BitwiseAndOr();
              jj_consume_token(47);
retval = new Parenthesis(retval);
            } else {
              switch (jj_nt.kind) {
              case 46:{
                jj_consume_token(46);
                token = jj_consume_token(S_IDENTIFIER);
                jj_consume_token(46);
retval = new GlobalVar(token.image);
                break;
                }
              case S_CHAR_LITERAL:{
                token = jj_consume_token(S_CHAR_LITERAL);
retval = new StringValue(token.image);
                break;
                }
              case 59:{
                jj_consume_token(59);
                token = jj_consume_token(S_CHAR_LITERAL);
                jj_consume_token(60);
retval = new DateValue(token.image);
                break;
                }
              case 61:{
                jj_consume_token(61);
                token = jj_consume_token(S_CHAR_LITERAL);
                jj_consume_token(60);
retval = new TimeValue(token.image);
                break;
                }
              case 62:{
                jj_consume_token(62);
                token = jj_consume_token(S_CHAR_LITERAL);
                jj_consume_token(60);
retval = new TimestampValue(token.image);
                break;
                }
              default:
                jj_la1[38] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
      switch (jj_nt.kind) {
      case 63:{
        jj_consume_token(63);
        type = ColDataType();
castExpr = new CastExpression();
        castExpr.setUseCastKeyword(false);
        castExpr.setLeftExpression(retval);
        castExpr.setType(type);
        retval=castExpr;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if (sign != null) {
            retval = new SignedExpression(sign.image.charAt(0), retval);
        }
        {if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public Column Column() throws ParseException {/*@bgen(jjtree) Column */
    SimpleNode jjtn000 = new SimpleNode(JJTCOLUMN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String databaseName = null, schemaName = null, tableName = null, columnName = null;
    try {
      if (jj_2_21(7)) {
        databaseName = RelObjectName();
        jj_consume_token(64);
        switch (jj_nt.kind) {
        case K_END:
        case K_CAST:
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          schemaName = RelObjectName();
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        jj_consume_token(64);
        tableName = RelObjectName();
        jj_consume_token(64);
        columnName = RelObjectName();
      } else if (jj_2_22(5)) {
        schemaName = RelObjectName();
        jj_consume_token(64);
        tableName = RelObjectName();
        jj_consume_token(64);
        columnName = RelObjectName();
      } else if (jj_2_23(3)) {
        tableName = RelObjectName();
        jj_consume_token(64);
        columnName = RelObjectName();
      } else {
        switch (jj_nt.kind) {
        case K_END:
        case K_CAST:
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          columnName = RelObjectName();
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
final Table table = new Table(schemaName, tableName);
        Column col = new Column(table, columnName);
        linkAST(col,jjtn000);
        {if ("" != null) return col;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ColDataType ColDataType() throws ParseException {/*@bgen(jjtree) ColDataType */
    SimpleNode jjtn000 = new SimpleNode(JJTCOLDATATYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);ColDataType colDataType = new ColDataType();
    Token tk = null;
    Token tk2 = null;
    ArrayList argumentsStringList = new ArrayList();
    List<Integer> array = new ArrayList<Integer>();
    try {
      if (jj_2_24(2)) {
        jj_consume_token(43);
        label_11:
        while (true) {
          switch (jj_nt.kind) {
          case S_LONG:
          case S_IDENTIFIER:
          case S_CHAR_LITERAL:{
            ;
            break;
            }
          default:
            jj_la1[42] = jj_gen;
            break label_11;
          }
          switch (jj_nt.kind) {
          case S_LONG:{
            tk = jj_consume_token(S_LONG);
            break;
            }
          case S_CHAR_LITERAL:{
            tk = jj_consume_token(S_CHAR_LITERAL);
            break;
            }
          case S_IDENTIFIER:{
            tk = jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
argumentsStringList.add(tk.image);
          switch (jj_nt.kind) {
          case 45:{
            jj_consume_token(45);

            break;
            }
          default:
            jj_la1[44] = jj_gen;
            ;
          }
        }
        jj_consume_token(47);
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case 65:{
        label_12:
        while (true) {
          jj_consume_token(65);
tk=null;
          switch (jj_nt.kind) {
          case S_LONG:{
            tk = jj_consume_token(S_LONG);
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            ;
          }
array.add(tk!=null?Integer.valueOf(tk.image):null);
          jj_consume_token(66);
          switch (jj_nt.kind) {
          case 65:{
            ;
            break;
            }
          default:
            jj_la1[46] = jj_gen;
            break label_12;
          }
        }
colDataType.setArrayData(array);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if (argumentsStringList.size() > 0)
            colDataType.setArgumentsStringList(argumentsStringList);
        {if ("" != null) return colDataType;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public DateTimeLiteralExpression DateTimeLiteralExpression() throws ParseException {/*@bgen(jjtree) DateTimeLiteralExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTDATETIMELITERALEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);DateTimeLiteralExpression expr = new DateTimeLiteralExpression();
    Token t;
    try {
      t = jj_consume_token(K_DATETIMELITERAL);
expr.setType(DateTimeLiteralExpression.DateTime.valueOf(t.image.toUpperCase()));
      t = jj_consume_token(S_CHAR_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
expr.setValue(t.image); {if ("" != null) return expr;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {/*@bgen(jjtree) CastExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTCASTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);CastExpression retval = new CastExpression();
    ColDataType type = null;
    Expression expression = null;
    boolean    useCastKeyword;
    try {
      jj_consume_token(K_CAST);
      jj_consume_token(43);
      expression = SimpleExpression();
      jj_consume_token(K_AS);
      type = ColDataType();
      jj_consume_token(47);
retval.setUseCastKeyword(true);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
retval.setLeftExpression(expression);
        retval.setType(type);
        {if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression CaseWhenExpression() throws ParseException {/*@bgen(jjtree) CaseWhenExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTCASEWHENEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);CaseExpression caseExp = new CaseExpression();
    Expression switchExp = null;
    WhenClause clause;
    List whenClauses = new ArrayList();
    Expression elseExp = null;
    try {
      jj_consume_token(K_CASE);
      switch (jj_nt.kind) {
      case K_WHEN:{
        label_13:
        while (true) {
          clause = WhenThenSearchCondition();
whenClauses.add(clause);
          switch (jj_nt.kind) {
          case K_WHEN:{
            ;
            break;
            }
          default:
            jj_la1[48] = jj_gen;
            break label_13;
          }
        }
        break;
        }
      case K_END:
      case K_NOT:
      case K_NULL:
      case K_TIME_KEY_EXPR:
      case K_CASE:
      case K_CAST:
      case K_IF:
      case K_DATETIMELITERAL:
      case S_DOUBLE:
      case S_LONG:
      case S_HEX:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 43:
      case 46:
      case 48:
      case 49:
      case 59:
      case 61:
      case 62:{
        if (jj_2_25(2147483647)) {
          switchExp = RegularCondition();
        } else {
          switch (jj_nt.kind) {
          case K_END:
          case K_NULL:
          case K_TIME_KEY_EXPR:
          case K_CASE:
          case K_CAST:
          case K_IF:
          case K_DATETIMELITERAL:
          case S_DOUBLE:
          case S_LONG:
          case S_HEX:
          case S_IDENTIFIER:
          case S_CHAR_LITERAL:
          case S_QUOTED_IDENTIFIER:
          case 43:
          case 46:
          case 48:
          case 49:
          case 59:
          case 61:
          case 62:{
            switchExp = BitwiseAndOr();
            break;
            }
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_14:
        while (true) {
          clause = WhenThenValue();
whenClauses.add(clause);
          switch (jj_nt.kind) {
          case K_WHEN:{
            ;
            break;
            }
          default:
            jj_la1[50] = jj_gen;
            break label_14;
          }
        }
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case K_ELSE:{
        jj_consume_token(K_ELSE);
        elseExp = SimpleExpression();
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
caseExp.setSwitchExpression(switchExp);
        caseExp.setWhenClauses(whenClauses);
        caseExp.setElseExpression(elseExp);
        {if ("" != null) return caseExp;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public WhenClause WhenThenSearchCondition() throws ParseException {/*@bgen(jjtree) WhenThenSearchCondition */
    SimpleNode jjtn000 = new SimpleNode(JJTWHENTHENSEARCHCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);WhenClause whenThen = new WhenClause();
    Expression whenExp = null;
    Expression thenExp = null;
    try {
      jj_consume_token(K_WHEN);
      if (jj_2_26(2147483647)) {
        whenExp = Expression();
      } else {
        switch (jj_nt.kind) {
        case K_END:
        case K_NULL:
        case K_TIME_KEY_EXPR:
        case K_CASE:
        case K_CAST:
        case K_IF:
        case K_DATETIMELITERAL:
        case S_DOUBLE:
        case S_LONG:
        case S_HEX:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 43:
        case 46:
        case 48:
        case 49:
        case 59:
        case 61:
        case 62:{
          whenExp = SimpleExpression();
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(K_THEN);
      thenExp = SimpleExpression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
whenThen.setWhenExpression(whenExp);
       whenThen.setThenExpression(thenExp);
       {if ("" != null) return whenThen;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public WhenClause WhenThenValue() throws ParseException {/*@bgen(jjtree) WhenThenValue */
    SimpleNode jjtn000 = new SimpleNode(JJTWHENTHENVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);WhenClause whenThen = new WhenClause();
    Expression whenExp = null;
    Expression thenExp = null;
    try {
      jj_consume_token(K_WHEN);
      whenExp = PrimaryExpression();
      jj_consume_token(K_THEN);
      thenExp = SimpleExpression();
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
whenThen.setWhenExpression(whenExp);
       whenThen.setThenExpression(thenExp);
       {if ("" != null) return whenThen;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Function Function() throws ParseException {/*@bgen(jjtree) Function */
    SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Function retval = new Function();
    String funcName = null;
    String tmp = null;
    ExpressionList expressionList = null;
    try {
      funcName = RelObjectNameExt();
funcName = funcName.toLowerCase();
      switch (jj_nt.kind) {
      case 64:{
        jj_consume_token(64);
        tmp = RelObjectNameExt();
funcName+= "." + tmp;
        switch (jj_nt.kind) {
        case 64:{
          jj_consume_token(64);
          tmp = RelObjectNameExt();
funcName+= "." + tmp;
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(43);
      expressionList = SimpleExpressionList();
      jj_consume_token(47);
      switch (jj_nt.kind) {
      case 64:{
        jj_consume_token(64);
        tmp = RelObjectName();
retval.setAttribute(tmp);
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if(!funcMap.containsKey(funcName)) {
                {if (true) throw new ParseException();}
        }
        retval.setParameters(expressionList);
        retval.setName(funcName);
        retval.setFuncCommand(funcMap.get(funcName));
        linkAST(retval,jjtn000);
        {if ("" != null) return retval;}
    } catch (Throwable jjte000) {
if (jjtc000) {
           jjtree.clearNodeScope(jjtn000);
           jjtc000 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte000 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte000;}
         }
         if (jjte000 instanceof ParseException) {
           {if (true) throw (ParseException)jjte000;}
         }
         {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
           jjtree.closeNodeScope(jjtn000, true);
         }
    }
    throw new Error("Missing return statement in function");
  }

  final public String RelObjectName() throws ParseException {/*@bgen(jjtree) RelObjectName */
     SimpleNode jjtn000 = new SimpleNode(JJTRELOBJECTNAME);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      switch (jj_nt.kind) {
      case S_IDENTIFIER:{
        tk = jj_consume_token(S_IDENTIFIER);
        break;
        }
      case S_QUOTED_IDENTIFIER:{
        tk = jj_consume_token(S_QUOTED_IDENTIFIER);
        break;
        }
      case K_CAST:{
        tk = jj_consume_token(K_CAST);
        break;
        }
      case K_END:{
        tk = jj_consume_token(K_END);
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return tk.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String PKObjectName() throws ParseException {/*@bgen(jjtree) PKObjectName */
     SimpleNode jjtn000 = new SimpleNode(JJTPKOBJECTNAME);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      tk = jj_consume_token(PK_IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return tk.image;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression Condition() throws ParseException {/*@bgen(jjtree) Condition */
    SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result;
    Token token;
    try {
      if (jj_2_27(2147483647)) {
        result = SQLCondition();
      } else if (jj_2_28(2147483647)) {
        result = RegularCondition();
      } else if (jj_2_29(2147483647)) {
        result = Function();
      } else {
        switch (jj_nt.kind) {
        case K_NOT:{
          jj_consume_token(K_NOT);
          result = Column();
result = new NotExpression(result);
          break;
          }
        case K_END:
        case K_CAST:
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:{
          result = Column();
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          if ("0".equals(getToken(1).image) || "1".equals(getToken(1).image)) {
            token = jj_consume_token(S_LONG);
result = new LongValue(token.image);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression SQLCondition() throws ParseException {/*@bgen(jjtree) SQLCondition */
    SimpleNode jjtn000 = new SimpleNode(JJTSQLCONDITION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Expression result;
    try {
      if (jj_2_30(2147483647)) {
        result = IsNullExpression();
      } else {
        switch (jj_nt.kind) {
        case K_END:
        case K_NULL:
        case K_TIME_KEY_EXPR:
        case K_CASE:
        case K_CAST:
        case K_IF:
        case K_DATETIMELITERAL:
        case S_DOUBLE:
        case S_LONG:
        case S_HEX:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 43:
        case 46:
        case 48:
        case 49:
        case 59:
        case 61:
        case 62:{
          result = LikeExpression();
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
{if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression LikeExpression() throws ParseException {/*@bgen(jjtree) LikeExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTLIKEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);LikeExpression result = new LikeExpression();
    Expression leftExpression = null;
    Expression rightExpression = null;
    try {
      leftExpression = SimpleExpression();
      switch (jj_nt.kind) {
      case K_NOT:{
        jj_consume_token(K_NOT);
result.setNot(true);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
result.setCaseInsensitive(true);
      rightExpression = SimpleExpression();
      switch (jj_nt.kind) {
      case K_ESCAPE:{
        jj_consume_token(K_ESCAPE);
        token = jj_consume_token(S_CHAR_LITERAL);
result.setEscape((new StringValue(token.image)).getValue());
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
result.setLeftExpression(leftExpression);
        result.setRightExpression(rightExpression);
        {if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression IsNullExpression() throws ParseException {/*@bgen(jjtree) IsNullExpression */
    SimpleNode jjtn000 = new SimpleNode(JJTISNULLEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);IsNullExpression result = new IsNullExpression();
    Expression leftExpression = null;
    try {
      switch (jj_nt.kind) {
      case K_NOT:{
        jj_consume_token(K_NOT);
result.setNot(true);
        leftExpression = SimpleExpression();
        jj_consume_token(K_IS);
        jj_consume_token(K_NULL);
        break;
        }
      case K_END:
      case K_NULL:
      case K_TIME_KEY_EXPR:
      case K_CASE:
      case K_CAST:
      case K_IF:
      case K_DATETIMELITERAL:
      case S_DOUBLE:
      case S_LONG:
      case S_HEX:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 43:
      case 46:
      case 48:
      case 49:
      case 59:
      case 61:
      case 62:{
        leftExpression = SimpleExpression();
        jj_consume_token(K_IS);
        switch (jj_nt.kind) {
        case K_NOT:{
          jj_consume_token(K_NOT);
result.setNot(true);
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        jj_consume_token(K_NULL);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
result.setLeftExpression(leftExpression);
        {if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
Extended usage of object names.
*/
  final public String RelObjectNameExt() throws ParseException {/*@bgen(jjtree) RelObjectNameExt */
  SimpleNode jjtn000 = new SimpleNode(JJTRELOBJECTNAMEEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
  String result=null;
    try {
      switch (jj_nt.kind) {
      case K_END:
      case K_CAST:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        result = RelObjectName();
        break;
        }
      case K_IF:{
        tk = jj_consume_token(K_IF);
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
if (tk!=null) result=tk.image;
        {if ("" != null) return result;}
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_3_8()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    Token xsp;
    if (jj_3R_114()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(K_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(K_CAST)) return true;
    if (jj_scan_token(43)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(K_DATETIMELITERAL)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(65)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    Token xsp;
    if (jj_3R_118()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_scan_token(43)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(64)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_scan_token(S_LONG)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(63)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(62)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(61)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(46)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(K_TIME_KEY_EXPR)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    if (jj_scan_token(S_HEX)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    if (jj_scan_token(S_LONG)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(PK_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_scan_token(K_LIKE)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(58)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_86()) return true;
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(K_NOT)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(K_IS)) return true;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_86()) return true;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(64)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(52)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(S_LONG)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(K_NOT)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = "0".equals(getToken(1).image) || "1".equals(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_51()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(64)) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(64)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(47)) return true;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(OP_NOTEQUALSBANG)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(OP_NOTEQUALSSTANDARD)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(OP_MINORTHANEQUALS)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(OP_GREATERTHANEQUALS)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(K_WHEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    if (jj_3R_117()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_117()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[65];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x58338d10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x40,0x80,0x80,0x80,0x7800000,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x900,0x400,0x0,0x0,0x8010,0x8010,0x10000000,0x10000000,0x0,0x10000000,0x0,0x0,0x1000,0x58038d10,0x1000,0x58039d90,0x4000,0x58038d10,0x0,0x0,0x0,0x8010,0x8090,0x58038d10,0x80,0x80000,0x80,0x58038d90,0x18010,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x68034864,0x2000,0x30000,0x30000,0x30000,0x30000,0x200,0x44,0x0,0x800,0x0,0x0,0x800,0x0,0x81000,0x2000,0x2000,0x600000,0x600000,0x30000,0x3800000,0x4000000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x30000,0x0,0x0,0x68004020,0x80000000,0x44,0x44,0x24,0x24,0x2000,0x0,0x0,0x0,0x0,0x68034864,0x0,0x68034864,0x0,0x68034864,0x0,0x0,0x0,0x44,0x44,0x68034864,0x0,0x0,0x0,0x68034864,0x44,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 65; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
