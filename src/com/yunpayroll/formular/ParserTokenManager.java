/* ParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package com.yunpayroll.formular;
import java.util.ArrayList;
import java.util.List;
import com.yunpayroll.formular.express.*;

/** Token Manager. */
@SuppressWarnings("unused")public class ParserTokenManager implements ParserConstants {
    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getBeginColumn();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x6800000000000000L) != 0L)
            return 122;
         if ((active0 & 0x2000000000000L) != 0L)
            return 20;
         if ((active0 & 0x4000000000000L) != 0L)
            return 123;
         if ((active0 & 0x8800L) != 0L)
         {
            jjmatchedKind = 34;
            return 83;
         }
         if ((active1 & 0x1L) != 0L)
            return 9;
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 34;
            return 3;
         }
         if ((active0 & 0x3953fcL) != 0L)
         {
            jjmatchedKind = 34;
            return 124;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 125;
         if ((active1 & 0x2L) != 0L)
            return 39;
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 34;
            return 56;
         }
         if ((active0 & 0x100000000000000L) != 0L)
            return 23;
         return -1;
      case 1:
         if ((active0 & 0x1002cL) != 0L)
            return 124;
         if ((active0 & 0x3cfbd0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 34;
               jjmatchedPos = 1;
            }
            return 124;
         }
         if ((active0 & 0x6800000000000000L) != 0L)
            return 122;
         return -1;
      case 2:
         if ((active0 & 0x3cfb00L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
            return 124;
         }
         if ((active0 & 0xd0L) != 0L)
            return 124;
         if ((active0 & 0x4000000000000000L) != 0L)
            return 122;
         return -1;
      case 3:
         if ((active0 & 0xfb00L) != 0L)
            return 124;
         if ((active0 & 0x3c0000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
            return 124;
         }
         return -1;
      case 4:
         if ((active0 & 0x3c0000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 4;
            return 124;
         }
         return -1;
      case 5:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 5;
            return 124;
         }
         if ((active0 & 0xc0000L) != 0L)
            return 124;
         return -1;
      case 6:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 6;
            return 124;
         }
         return -1;
      case 7:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 7;
            return 124;
         }
         return -1;
      case 8:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 8;
            return 124;
         }
         return -1;
      case 9:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 9;
            return 124;
         }
         return -1;
      case 10:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 10;
            return 124;
         }
         return -1;
      case 11:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 11;
            return 124;
         }
         return -1;
      case 12:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 12;
            return 124;
         }
         return -1;
      case 13:
         if ((active0 & 0x300000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 13;
            return 124;
         }
         return -1;
      case 14:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 14;
            return 124;
         }
         if ((active0 & 0x100000L) != 0L)
            return 124;
         return -1;
      case 15:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 15;
            return 124;
         }
         return -1;
      case 16:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 16;
            return 124;
         }
         return -1;
      case 17:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 17;
            return 124;
         }
         return -1;
      case 18:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 18;
            return 124;
         }
         return -1;
      case 19:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 19;
            return 124;
         }
         return -1;
      case 20:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 20;
            return 124;
         }
         return -1;
      case 21:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 21;
            return 124;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 37:
         return jjStopAtPos(0, 57);
      case 38:
         return jjStopAtPos(0, 54);
      case 40:
         return jjStopAtPos(0, 43);
      case 41:
         return jjStopAtPos(0, 47);
      case 42:
         return jjStopAtPos(0, 55);
      case 43:
         return jjStopAtPos(0, 48);
      case 44:
         return jjStopAtPos(0, 45);
      case 45:
         return jjStartNfaWithStates_0(0, 49, 20);
      case 46:
         return jjStartNfaWithStates_0(0, 64, 9);
      case 47:
         return jjStartNfaWithStates_0(0, 56, 23);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L);
      case 59:
         return jjStopAtPos(0, 22);
      case 60:
         return jjStartNfaWithStates_0(0, 51, 125);
      case 61:
         return jjStopAtPos(0, 44);
      case 62:
         return jjStartNfaWithStates_0(0, 50, 123);
      case 64:
         return jjStopAtPos(0, 46);
      case 91:
         return jjStartNfaWithStates_0(0, 65, 39);
      case 93:
         return jjStopAtPos(0, 66);
      case 94:
         return jjStopAtPos(0, 58);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x44L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8800L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x84010L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x10008L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x180L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x6800000000000000L);
      case 124:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 125:
         return jjStopAtPos(0, 60);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x108800L);
      case 68:
      case 100:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 59, 122);
         break;
      case 70:
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 124);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x50L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40080L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 82:
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 124);
         break;
      case 83:
      case 115:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 2, 124);
         else if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 124);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 124:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 68:
      case 100:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 124);
         else if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 124);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100100L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 62, 122);
         return jjMoveStringLiteralDfa3_0(active0, 0xc800L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 124);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 124);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 124);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 124);
         break;
      case 76:
      case 108:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 124);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 124);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 124);
         break;
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 124);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 124);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 124);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x300000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(14, 20, 124);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(22, 21, 124);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 122;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 124:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  break;
               case 3:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  break;
               case 83:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  break;
               case 123:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  else if (curChar == 61)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  break;
               case 125:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(108, 109); }
                  else if (curChar == 62)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(106, 107); }
                  break;
               case 122:
               case 43:
                  { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 60)
                     { jjCheckNAddStates(7, 10); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(11, 16); }
                  else if (curChar == 34)
                     { jjCheckNAdd(33); }
                  else if (curChar == 36)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 46)
                     { jjCheckNAdd(9); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(6, 7); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 56:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  break;
               case 5:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar == 61 && kind > 23)
                     kind = 23;
                  break;
               case 8:
                  if (curChar == 46)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 11:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if (curChar == 39)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 15:
                  if (curChar == 39 && kind > 30)
                     kind = 30;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar != 45)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 24:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if (curChar == 42)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 26:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(27, 25); }
                  break;
               case 27:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(27, 25); }
                  break;
               case 28:
                  if (curChar == 47 && kind > 33)
                     kind = 33;
                  break;
               case 29:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if (curChar == 34)
                     { jjCheckNAdd(33); }
                  break;
               case 33:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(33, 34); }
                  break;
               case 34:
                  if (curChar == 34 && kind > 38)
                     kind = 38;
                  break;
               case 36:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(20, 21); }
                  break;
               case 39:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if (curChar == 39)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 48:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 49:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 50:
                  if (curChar == 39 && kind > 37)
                     kind = 37;
                  break;
               case 51:
                  if (curChar == 39)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 52:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(25, 27); }
                  break;
               case 67:
                  if (curChar == 41 && kind > 10)
                     kind = 10;
                  break;
               case 68:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 105:
                  if (curChar == 60)
                     { jjCheckNAddStates(7, 10); }
                  break;
               case 106:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(106, 107); }
                  break;
               case 107:
                  if (curChar == 61 && kind > 24)
                     kind = 24;
                  break;
               case 108:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(108, 109); }
                  break;
               case 109:
                  if (curChar == 62 && kind > 25)
                     kind = 25;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(111, 8); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(112, 113); }
                  break;
               case 113:
                  if (curChar != 46)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 115:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(116); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(116); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(117, 118); }
                  break;
               case 119:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(120); }
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  { jjCheckNAdd(120); }
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAdd(121); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 124:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  break;
               case 3:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 83:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 122:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  else if (curChar == 125)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  else if (curChar == 123)
                     { jjCheckNAddTwoStates(43, 44); }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 96)
                     { jjCheckNAdd(36); }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(28, 30); }
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(31, 32); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 56:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     { jjCheckNAdd(31); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                     { jjCheckNAdd(45); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 1:
                  if ((0x2000000020L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 2:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(33, 34); }
                  break;
               case 14:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(35, 36); }
                  break;
               case 16:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  { jjCheckNAdd(18); }
                  break;
               case 21:
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 26:
               case 27:
                  { jjCheckNAddTwoStates(27, 25); }
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 33:
                  { jjAddStates(37, 38); }
                  break;
               case 35:
                  if (curChar == 96)
                     { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 37:
                  if (curChar == 96 && kind > 38)
                     kind = 38;
                  break;
               case 38:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
               case 40:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (curChar == 93 && kind > 38)
                     kind = 38;
                  break;
               case 42:
                  if (curChar == 123)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 43:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 44:
                  if (curChar == 125 && kind > 40)
                     kind = 40;
                  break;
               case 45:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  { jjCheckNAdd(45); }
                  break;
               case 47:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 48:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 49:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 53:
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 54:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(31, 32); }
                  break;
               case 55:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 57:
                  if ((0x1000000010000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 58:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x800000008L & l) != 0L)
                     { jjAddStates(28, 30); }
                  break;
               case 66:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(68); }
                  break;
               case 69:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 70:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 84:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  { jjCheckNAdd(68); }
                  break;
               case 85:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(84); }
                  break;
               case 86:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(84); }
                  break;
               case 96:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 114:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(39, 40); }
                  break;
               case 118:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(41, 42); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 124:
               case 31:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 3:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 83:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 122:
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 56:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  { jjCheckNAdd(31); }
                  break;
               case 21:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 26:
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(27, 25); }
                  break;
               case 33:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(37, 38); }
                  break;
               case 36:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(20, 21); }
                  break;
               case 39:
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 53:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(25, 27); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 122 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   111, 8, 112, 113, 117, 118, 121, 106, 107, 108, 109, 47, 49, 50, 52, 53, 
   50, 25, 26, 28, 36, 37, 47, 49, 50, 52, 53, 50, 83, 94, 104, 56, 
   64, 11, 12, 14, 15, 33, 34, 115, 116, 119, 120, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\73", null, null, null, 
"\41\75", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\50", "\75", "\54", "\100", "\51", "\53", "\55", "\76", "\74", 
"\174\174", "\174", "\46", "\52", "\57", "\45", "\136", null, "\175", null, null, 
"\72\72", "\56", "\133", "\135", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 122; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffb645ffffffdL, 0x7L, 
};
static final long[] jjtoSkip = {
   0x300000002L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x300000000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[122];
    private final int[] jjstateSet = new int[2 * 122];

    
    protected char curChar;
}
